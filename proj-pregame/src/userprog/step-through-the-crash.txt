Step into the process_execute function. What is the name and address of the thread running this function? What other threads are present in Pintos at this time? Copy their struct threads. (Hint: for the last part, dumplist &all_list thread allelem may be useful.)
The name of the thread is main and its id is 1, the address of the thread is 0xc000e000. What other threads are present is given below:
dumplist &all_list thread allelem
pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_RUNNING, name = "main", '\000' <repeats 11 times>, stack = 0xc000edbc "\335\322\002\300\n", priority = 31, allelem = {
    prev = 0xc003b19c <all_list>, next = 0xc0104020}, elem = {prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0xc010500c, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED, name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f14 "", priority = 0, allelem = {prev = 0xc000e020,
    next = 0xc003b1a4 <all_list+8>}, elem = {prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0x0, magic = 3446325067}


What is the backtrace for the current thread? Copy the backtrace from GDB as your answer.
backtrace threads/build/kernel.o 0xc0020a5c 0xc0020ba9 0xc0020421
0xc0020a5c: run_task (/home/workspace/code/personal/proj-pregame/src/threads/init.c:317)
0xc0020ba9: run_actions (/home/workspace/code/personal/proj-pregame/src/threads/init.c:387)
0xc0020421: main (/home/workspace/code/personal/proj-pregame/src/threads/init.c:139)


Set a breakpoint at start_process and continue to that point. What is the name and address of the thread running this function? What other threads are present in Pintos at this time? Copy their struct threads.
Command Info thread returns
  Id   Target Id         Frame
* 1    Thread <main>     0xc00224d2 in intr0e_stub ()
So the current thread is the main thread with id 1 and the address is 0xc000e000.

(gdb) dumplist &all_list thread allelem
pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_BLOCKED, name = "main", '\000' <repeats 11 times>, stack = 0xc000ee7c "", priority = 31, allelem = {
    prev = 0xc003b19c <all_list>, next = 0xc0104020}, elem = {prev = 0xc003cbb8 <temporary+4>, next = 0xc003cbc0 <temporary+12>}, pcb = 0xc010500c, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED, name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f14 "", priority = 0, allelem = {prev = 0xc000e020,
    next = 0xc010b020}, elem = {prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0x0, magic = 3446325067}
pintos-debug: dumplist #2: 0xc010b000 {tid = 3, status = THREAD_RUNNING, name = "do-nothing\000\000\000\000\000",
  stack = 0xc010bc94 "ؼ\020\300\264\274\020\300\374\024\002\300\220\274\020\300\344\274\020\300\t\022\002\300", priority = 31, allelem = {prev = 0xc0104020,
    next = 0xc003b1a4 <all_list+8>}, elem = {prev = 0xc003b18c <fifo_ready_list>, next = 0xc003b194 <fifo_ready_list+8>}, pcb = 0xc010502c, magic = 3446325067}

Step through the start_process function until you have stepped over the call to load. Note that load sets the eip and esp fields in the if_ structure. Print out the value of the if_ structure, displaying the values in hex (hint: print/x if_).
print/x if_ returns {edi = 0x0, esi = 0x0, ebp = 0x0, esp_dummy = 0x0, ebx = 0x0, edx = 0x0, ecx = 0x0, eax = 0x0, gs = 0x23, fs = 0x23, es = 0x23, ds = 0x23, vec_no = 0x0, error_code = 0x0,
  frame_pointer = 0x0, eip = 0x804890f, cs = 0x1b, eflags = 0x202, esp = 0xc0000000, ss = 0x23}


The first instruction in the asm volatile statement sets the stack pointer to the bottom of the if_ structure. The second one jumps to intr_exit. The comments in the code explain what’s happening here. Step into the asm volatile statement, and then step through the instructions. As you step through the iret instruction, observe that the function “returns” into userspace. Why does the processor switch modes when executing this function? Feel free to explain this in terms of the values in memory and/or registers at the time iret is executed, and the functionality of the iret instruction.

Once you’ve executed iret, type info registers to print out the contents of registers. Include the output of this command on Gradescope. How do these values compare to those when you printed out if_?
eax            0x0                 0
ecx            0x0                 0
edx            0x0                 0
ebx            0x0                 0
esp            0xc0000000          0xc0000000
ebp            0x0                 0x0
esi            0x0                 0
edi            0x0                 0
eip            0x804890f           0x804890f
eflags         0x202               [ IF ]
cs             0x1b                27
ss             0x23                35
ds             0x23                35
es             0x23                35
fs             0x23                35
gs             0x23                35
These values match exactly between what was saved in if_ and what the processor loaded after iret.

This confirms that iret restores the full user-mode context from the if_ structure.

The values for cs = 0x1b and ss = 0x23 indicate a switch to Ring 3 (user mode), because:

0x1b → RPL = 3, i.e., 0x1b & 0x3 = 3

This triggers the privilege level change during iret.

Notice that if you try to get your current location with backtrace you’ll only get a hex address. This is because because the debugger only loads in the symbols from the kernel. Now that we are in userspace, we have to load in the symbols from the Pintos executable we are running, namely do-nothing. To do this, use loadusersymbols tests/userprog/do-nothing. Now, using backtrace, you’ll see that you’re currently in the _start function. Using the disassemble and stepi commands, step through userspace instruction by instruction until the page fault occurs. At this point, the processor has immediately entered kernel mode to handle the page fault, so backtrace will show the current stack in kernel mode, not the user stack at the time of the page fault. However, you can use btpagefault to find the user stack at the time of the page fault. Copy down the output of btpagefault.
=> 0x0804890f <+0>:     push   %ebp
   0x08048910 <+1>:     mov    %esp,%ebp
   0x08048912 <+3>:     sub    $0x18,%esp
   0x08048915 <+6>:     mov    0xc(%ebp),%eax
   0x08048918 <+9>:     mov    %eax,0x4(%esp)
   0x0804891c <+13>:    mov    0x8(%ebp),%eax
   0x0804891f <+16>:    mov    %eax,(%esp)
   0x08048922 <+19>:    call   0x8048094 <main>
   0x08048927 <+24>:    mov    %eax,(%esp)
   0x0804892a <+27>:    call   0x804ac03 <exit>

   (gdb) disassemble
Dump of assembler code for function _start:
   0x0804890f <+0>:     push   %ebp
   0x08048910 <+1>:     mov    %esp,%ebp
   0x08048912 <+3>:     sub    $0x18,%esp
=> 0x08048915 <+6>:     mov    0xc(%ebp),%eax
   0x08048918 <+9>:     mov    %eax,0x4(%esp)
   0x0804891c <+13>:    mov    0x8(%ebp),%eax
   0x0804891f <+16>:    mov    %eax,(%esp)
   0x08048922 <+19>:    call   0x8048094 <main>
   0x08048927 <+24>:    mov    %eax,(%esp)
   0x0804892a <+27>:    call   0x804ac03 <exit>
End of assembler dump.
(gdb) stepi
pintos-debug: a page fault exception occurred in user mode
pintos-debug: hit 'c' to continue, or 's' to step to intr_handler
0xc00224d2 in intr0e_stub ()
(gdb) disassemble
Dump of assembler code for function intr0e_stub:
=> 0xc00224d2 <+0>:     push   (%esp)
   0xc00224d5 <+3>:     mov    %ebp,0x4(%esp)
   0xc00224d9 <+7>:     push   $0xe
   0xc00224db <+9>:     jmp    0xc002242e <intr_entry>
End of assembler dump.

btpagefault
#0  _start (argc=-268370093, argv=0xf000ff53) at ../../lib/user/entry.c:6
#1  0xf000ff53 in ?? ()
